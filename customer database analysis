
--How many many unique orders were placed in January? In other words, how many distinct order ids do we have?
SELECT COUNT(distinct orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';
  
--How many of those orders were for an iPhone?
SELECT COUNT(distinct orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6
AND orderid <> 'Order ID';

--Select the customer account numbers for all the orders that were placed in February.
SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

--Which product was the cheapest one sold in January, and what was the price?
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);

--What is the total revenue for each product sold in January?
SELECT sum(quantity)*price as revenue
,product
FROM BIT_DB.JanSales
GROUP BY product;

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT
sum(Quantity),
product,
sum(quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT
count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';

-- list all products sold in LA in Feb and include how many of each were sold. 
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product

SELECT SUM(Quantity) AS total_quantity_sold
  FROM JanSales;-- total sales revenue

SELECT SUM(Quantity * price) AS total_revenue
  FROM JanSales;-- average price per product

SELECT Product,
       AVG(price) AS avg_price
  FROM JanSales
 GROUP BY Product;-- most sold products by quantity

SELECT Product,
       SUM(Quantity) AS total_quantity
  FROM JanSales
 GROUP BY Product
 ORDER BY total_quantity DESC;-- locations with the highest sales

SELECT location,
       SUM(Quantity * price) AS total_sales
  FROM JanSales
 GROUP BY location
 ORDER BY total_sales DESC;-- highest revenue generationg products

SELECT Product,
       ROUND(SUM(Quantity * price), 2) AS total_revenue
  FROM JanSales
 GROUP BY Product
 ORDER BY total_revenue DESC;-- top 3 products by revenue in each location

SELECT location,
       Product,
       total_revenue
  FROM (
           SELECT location,
                  Product,
                  ROUND(SUM(Quantity * price), 2) AS total_revenue,
                  RANK() OVER (PARTITION BY location ORDER BY SUM(Quantity * price) DESC) AS revenue_rank
             FROM JanSales
            GROUP BY location,
                     Product
       )
 WHERE revenue_rank <= 3
 ORDER BY location,
          revenue_rank;-- day with the highest revenue and what products sold the most that day

WITH daily_revenue AS (
    SELECT orderdate,
           SUM(Quantity * price) AS total
      FROM JanSales
     GROUP BY orderdate
),
top_day AS (
    SELECT orderdate
      FROM daily_revenue
     ORDER BY total DESC
     LIMIT 1
)
SELECT j.orderdate,
       j.Product,
       SUM(j.Quantity) AS total_sold
  FROM JanSales j
       JOIN
       top_day td ON j.orderdate = td.orderdate
 GROUP BY j.orderdate,
          j.Product
 ORDER BY total_sold DESC;
 
--  Locations in New York with at least 3 orders in January
SELECT location, COUNT(DISTINCT orderID) AS total_orders
FROM JanSales
WHERE location LIKE '%New York%'
GROUP BY location
HAVING total_orders >= 3;

-- number of each type of headphone sold in February
SELECT Product, SUM(Quantity) AS total_sold
FROM FebSales
WHERE Product LIKE '%headphone%'
GROUP BY Product;

-- Average amount spent per account in February
SELECT ROUND(SUM(Quantity * price) * 1.0 / COUNT(DISTINCT orderID), 2) AS avg_spent_per_account
FROM FebSales;

--  Product with the most revenue in January and its total revenue
SELECT Product, ROUND(SUM(Quantity * price), 2) AS total_revenue
FROM JanSales
GROUP BY Product
ORDER BY total_revenue DESC
LIMIT 1;


